<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>readme</title>
    <url>/2020/07/07/readme/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我的碎碎念</p>
<p><img src="/2020/07/07/readme/1.jpg" alt="题目"></p>
<h3 id="所爱隔山海，山海皆可移"><a href="#所爱隔山海，山海皆可移" class="headerlink" title="所爱隔山海，山海皆可移"></a>所爱隔山海，山海皆可移</h3><p><del>一个不爱学习的人是没有未来的。</del></p>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>如梦令_雪落</title>
    <url>/2020/07/08/%E5%A6%82%E6%A2%A6%E4%BB%A4_%E9%9B%AA%E8%90%BD/</url>
    <content><![CDATA[<h1 id="如梦令"><a href="#如梦令" class="headerlink" title="如梦令"></a>如梦令</h1><p>雪似前缘飘落，伊人笑靥成空。</p>
<p>月夜寒风袭，差拟柳絮随风。</p>
<p>雪落，雪落，又是一年寒处。</p>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>跳水板</title>
    <url>/2020/07/08/%E8%B7%B3%E6%B0%B4%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="面试题-16-11-跳水板"><a href="#面试题-16-11-跳水板" class="headerlink" title="面试题 16.11.跳水板"></a>面试题 16.11.跳水板</h1><p><img src="/2020/07/08/%E8%B7%B3%E6%B0%B4%E6%9D%BF/1.png" alt="题目"></p>
<p>提交三次才过，题目不难，怪我没有把所有情况都考虑到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divingBoard</span><span class="params">(self, shorter: int, longer: int, k: int)</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">elif</span> shorter ==longer:</span><br><span class="line">            <span class="keyword">return</span> [k*shorter]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,k+<span class="number">1</span>):</span><br><span class="line">                res.append((i*longer + (k-i)*shorter))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>当k=0的时候，返回值为空；</p>
<p>当最长和最短相同时，返回值应为 [k * 最长]，但如果不做特殊处理，在for循环中只能得到 [k * 最长] * k</p>
<p>剩下的就是最普通用的情况了：此时要注意，range(0,k)的范围是0~k-1，所以是k+1</p>
</blockquote>
]]></content>
      <categories>
        <category>简单</category>
      </categories>
  </entry>
  <entry>
    <title>数组异或操作</title>
    <url>/2020/07/07/%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="1486-数组异或操作"><a href="#1486-数组异或操作" class="headerlink" title="1486.数组异或操作"></a>1486.数组异或操作</h1><p><img src="/2020/07/07/%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/1.png" alt="题目"></p>
<p><del>题目很简单，但是</del> 我不记得异或操作了，得复习一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xorOperation</span><span class="params">(self, n: int, start: int)</span> -&gt; int:</span></span><br><span class="line">        num = start</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            num = num ^ (start + <span class="number">2</span>*i)</span><br><span class="line">        <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="异或操作"><a href="#异或操作" class="headerlink" title="异或操作 (^)"></a>异或操作 (^)</h3><p>十进制的异或操作需要经过一下步骤：</p>
<blockquote>
<p>1.将十进制数转换成二进制数；</p>
<p>2.二进制异或操作：相同为0，不同为1；</p>
<p>3.将结果转化成十进制数</p>
</blockquote>
<h3 id="异或的应用"><a href="#异或的应用" class="headerlink" title="异或的应用"></a>异或的应用</h3><blockquote>
<h4 id="1-计算不重复的值"><a href="#1-计算不重复的值" class="headerlink" title="1.计算不重复的值"></a>1.计算不重复的值</h4><p>可以对list中的值进行累计XOR运算，获得唯一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber2</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        r = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            print(i)</span><br><span class="line">            r ^= i</span><br><span class="line">        <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>



<h4 id="2-计算汉明距离"><a href="#2-计算汉明距离" class="headerlink" title="2.计算汉明距离"></a>2.计算汉明距离</h4><p>对两个字符串进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :type y: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> bin(x^y).count(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <categories>
        <category>简单</category>
      </categories>
      <tags>
        <tag>异或操作</tag>
      </tags>
  </entry>
  <entry>
    <title>重新排序数组</title>
    <url>/2020/07/07/%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="1470-重新排序数组"><a href="#1470-重新排序数组" class="headerlink" title="1470.重新排序数组"></a>1470.重新排序数组</h1><p><img src="/2020/07/07/%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/1.png" alt="题目"></p>
<p><del>太简单了，没有讲解（虽然不是双百）</del></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shuffle</span><span class="params">(self, nums: List[int], n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">            res.extend([nums[i],nums[n+i]])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>简单</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>反转链表</title>
    <url>/2020/07/11/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="剑指-Offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24.反转链表"></a>剑指 Offer 24.反转链表</h1><p><img src="/2020/07/11/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1.png" alt="题目"></p>
<p><del>这真的是一道简单题</del>，拿出来写的原因是<strong>我不会链表，最开始学C的时候就不会</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        preNode = <span class="literal">None</span></span><br><span class="line">        currNode = head</span><br><span class="line">        <span class="keyword">while</span> currNode:</span><br><span class="line">            nextNode = currNode.next</span><br><span class="line">            currNode.next = preNode</span><br><span class="line">            preNode = currNode</span><br><span class="line">            currNode = nextNode</span><br><span class="line">        <span class="keyword">return</span> preNode</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2>]]></content>
      <categories>
        <category>简单</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>计算右侧小于当前元素的个数</title>
    <url>/2020/07/11/%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>宫墙柳读后有感</title>
    <url>/2020/07/12/%E5%AE%AB%E5%A2%99%E6%9F%B3%E8%AF%BB%E5%90%8E%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2020/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>二叉树的最大深度</title>
    <url>/2020/07/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h1><p><img src="/2020/07/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/1.png" alt="题目"></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>有点难受二叉树和链表一样，都是我不擅长的<del>（不擅长的超级多）</del></p>
<p>求二叉树最大深度我认为最经典的算法应该是递归算法，但是python里面的内置函数太丰富了（真香）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + max(self.maxDepth(root.left), self.maxDepth(root.right))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二叉树深度算法"><a href="#二叉树深度算法" class="headerlink" title="二叉树深度算法"></a>二叉树深度算法</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BINODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">       TELEMETYPE data;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">BINODE</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiNode,*BiTtree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTreeDeep</span><span class="params">(BiTtree T)</span><span class="comment">//计算二叉树的深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">int</span> a = GetTreeDeep(T-&gt;lchild);</span><br><span class="line">              <span class="keyword">int</span> b = GetTreeDeep(T-&gt;rchild);</span><br><span class="line">              <span class="keyword">return</span> (a&gt;b)?(a+<span class="number">1</span>):(b+<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>简单</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>判断子序列</title>
    <url>/2020/07/27/%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>二叉树展开为链表</title>
    <url>/2020/08/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
